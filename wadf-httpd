#!@php_bin@
<?php

/*
    Web Application Deployment Framework
    (c)2006-2009 Tim Jackson (tim@timj.co.uk)
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of version 3 of the GNU General Public License as
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

set_include_path('.:@php_dir@');

require_once 'Tools/WADF.php';
require_once 'Console/Getopt.php'; // this is from PEAR

set_exception_handler(array('Tools_WADF', 'cmdlineHandleException'));

$WADF_HOME = getenv('HOME') . '/.wadf';

$httpd='/usr/sbin/httpd';

$source_conffile = '@cfg_dir@/Tools_WADF/httpd.conf.sample';

$command = null;
$show_instance_info = null;
$pidfile = "$WADF_HOME/httpd.pid";
$portfile = "$WADF_HOME/httpd.port";
$lockfile = "$WADF_HOME/httpd.lock";
$conffile = "$WADF_HOME/httpd.conf";
$errlogfile = "$WADF_HOME/httpd.error_log";
$vhost_dir = "$WADF_HOME/vhosts";
$default_vhost_file = "$vhost_dir/00-default.conf";
$default_error_page = "$WADF_HOME/default_error_page.html";
$prog = 'WADF HTTPD instance';

$con = new Console_Getopt;
$args = $con->readPHPArgv();
array_shift($args);
$options = $con->getopt2($args, 'Vi:', array('help'));

$usage_text = "Usage: wadf-httpd [<options>] COMMAND

Options:
  -i APPREF       Show status info only for deployed instance APPREF (does not
                  apply to 'stop' command)
  -V              Show WADF version & licensing information, then exit

Commands:
  start           Start the webserver
  stop            Stop the webserver
  restart         Hard-restart the webserver
  condrestart     Restart the webserver (does not start if not already running)
  reload          Gracefully restart the webserver
  reloadstart     Gracefully restart the webserver; start if not already running
  status          Show status information about deployed applications
  graceful        See 'reload'
  configtest      Check the webserver configuration for validity\n";

if (PEAR::isError($options)) {
	print $usage_text;
	exit(1);
}

foreach ($options[0] as $option) {
	switch ($option[0]) {
		case 'V':
			print Tools_WADF::getAboutText();
			exit(0);
			break;
		case 'i':
			$show_instance_info = $option[1];
			break;
		case '--help':
			print $usage_text;
			exit(0);
	}
}

if (!isset($options[1]) || !isset($options[1][0])) {
	print "No command specified\n";
	exit(5);
}

$command = $options[1][0];

$ret = 0;
$out = array();

function start($show_instance_info=null)
{
	global $prog, $ret, $out, $httpd, $conffile, $pidfile, $portfile, $lockfile, $errlogfile, $vhost_dir, $source_conffile, $WADF_HOME, $default_vhost_file, $default_error_page;
	if (file_exists($pidfile)) {
		if (is_really_running(trim(file_get_contents($pidfile)))) {
			print "$prog is already running\n";
			exit(0);
		} else {
			cleanup_instance();
		}
	}
	
	// Create per-user WADF config directory if it doesn't exist
	if (!file_exists($WADF_HOME)) {
		mkdir($WADF_HOME);
	}
	
	// Create vhost config directory if it doesn't exist
	if (!file_exists($vhost_dir)) {
		mkdir($vhost_dir);
	}
	
	if (!file_exists($conffile)) {
		// Insert default config
		Tools_WADF::consoleOutput("Enter your e-mail address. This will be used as the ServerAdmin for the virtual hosts managed by wadf-httpd.");
		$email = fgets(STDIN);
		$config = file_get_contents($source_conffile);
		$config = str_replace('#WADF-SERVERADMIN#', $email, $config);
		$fp = fopen($conffile, 'w');
		fputs($fp, $config);
		fclose($fp);
	}
	
	if ($fp = @fopen($default_vhost_file, 'w')) {
		fputs($fp, "# This file is automatically generated by wadf-httpd\n\n<VirtualHost _default_:*>\n\tRewriteEngine on\n\tRewriteRule ^(.*)$ $default_error_page [L]\n</VirtualHost>\n");
		fclose($fp);
	}
	
	echo "Starting $prog: ";
	
	check_config();
	if ($ret == 0) {

		// Find a good port to listen on
		$sock = false;
		$port = 10080;
		while ($sock === false) {
			$sock = @socket_create_listen($port);
			if ($sock === false) {
				$port++;
			} else {
				socket_shutdown($sock, 2);
				socket_close($sock);
			}
		}
		$fp = fopen($portfile, 'w');
		fputs($fp, $port);
		fclose($fp);

		$cmd = "LANG=C $httpd -f $conffile -C 'PidFile $pidfile' -C 'ErrorLog $errlogfile' -c 'Listen $port' -c 'NameVirtualHost *' -C 'Include $vhost_dir/*' 2>&1";
		exec($cmd, $out, $ret);
		if ($ret == 0) {
			touch($lockfile);
			list_vhosts($show_instance_info);
		}
	} else {
		$out[] = "Not starting due to syntax error in HTTPD configuration file";
	}
}

function stop()
{
	global $httpd, $prog, $ret, $out, $pidfile, $conffile;
	if (!file_exists($pidfile)) {
		print "$prog is not running\n";
		exit(0);
	}
	$pid = file_get_contents(trim($pidfile));
	if (is_really_running($pid)) {
		echo "Stopping $prog: ";
		exec("LANG=C $httpd -c 'PidFile $pidfile' -k graceful-stop", $out, $ret);
		//exec("kill $pid", $out, $ret);
		cleanup_instance();
	} else {
		print "$prog is not running\n";
		cleanup_instance();
		exit(0);
	}
}

function reload($show_instance_info=null)
{
	global $prog, $ret, $out, $conffile, $httpd, $pidfile;
	echo "Reloading $prog: ";
	check_config();
	if ($ret !== 0) {
		$out[] = "Not reloading due to syntax error in HTTPD configuration file\n";
	} else {
		$pidfile = trim($pidfile);
		if (file_exists($pidfile)) {
			$pid = trim(file_get_contents($pidfile));
			if (is_really_running($pid)) {
				exec("kill -HUP ".file_get_contents(trim($pidfile)), $out, $ret);
				if ($ret == 0) {
					list_vhosts($show_instance_info);
				}
			} else {
				$out[] = "$prog is not running; starting\n";
				start($show_instance_info);
			}
		} else {
			$out[] = "$prog is not running; starting\n";
			start($show_instance_info);
		}
	}
}

function check_config()
{
	global $ret, $out, $httpd, $conffile, $pidfile;
	$stderr = tempnam('', 'wadf-httpd');
	exec("LANG=C $httpd -f $conffile -C 'PidFile $pidfile' -t >/dev/null 2>$stderr", $out, $ret);
	if ($ret != 0) {
		$out[] = "\nError in HTTPD config file:";
		$out[] = file_get_contents($stderr);
	}
	@unlink($stderr);
}

function list_vhosts($show_instance_info=null)
{
	global $out, $portfile, $vhost_dir, $default_error_page;
	
	$vhosts = Tools_WADF::getDeployedVhosts($vhost_dir);
	
	$port = trim(file_get_contents($portfile));
	if (empty($port)) {
		print "Could not read listening port from $portfile\n";
		exit(5);
	}
	
	if (!is_null($show_instance_info) && isset($vhosts[$show_instance_info])) {
		$out[] = "Listening on port $port; configured for " . count($vhosts) . " applications including:";
		$out = array_merge($out, list_vhost_info($show_instance_info, $vhosts[$show_instance_info], $port));
	} elseif (count($vhosts) > 0) {
		$out[] = "Listening on port $port; configured for the following applications:";
		foreach ($vhosts as $appname => $details) {
			$out = array_merge($out, list_vhost_info($appname, $details, $port));
		}
	}
	
	$host = getenv('HOSTNAME');
	if (!empty($host)) {
		$title = "WADF HTTP server on $host";
	} else {
		$title = "WADF HTTP server";
	}
	$html_out = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
	<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
	<head><title>$title</title>
	<style type='text/css'>body { font-family: sans-serif; }
	th,td { vertical-align: top; border: 1px solid black; padding: 0.5em; font-size: 85%; }
	table { border-collapse: collapse; }
	</style></head><body><h1>$title</h1><h2>Listening on port $port and configured for the following applications:</h2>\n";
	if (count($vhosts) > 0) {
		$html_out .= "<table><tr><th>Application reference</th><th>Filesystem path</th><th>Version</th><th>Virtual hosts</th></tr>\n";
		foreach ($vhosts as $appname => $details) {
			$html_out .= "\t<tr><td>$appname</td><td>" . $details['working_dir'] . '</td><td>' . $details['deploy_version'] . '</td>';
			$html_out .= "<td>\n";
			foreach ($details['vhosts'] as $vhost_details) {
				$vhost_details['interface'] = str_replace('*', ":$port", $vhost_details['interface']);
				
				$host = $vhost_details['hostname'] . $vhost_details['interface'];
				$html_out .= "\t\t\t<a href='http://$host'>";
				if (isset($vhost_details['description'])) {
					$html_out .= str_replace(' ', '&nbsp;', $vhost_details['description']);
				} else {
					$html_out .= $host;
				}
				$html_out .= "</a><br/>\n";
			}
			$html_out .= "\t</td></tr>\n";
		}
		$html_out .= "</table>\n";
	} else {
		$html_out .= "<p>None</p>\n";
	}
	$html_out .= "</body></html>";	
	if ($fp = @fopen($default_error_page, 'w')) {
		fputs($fp, $html_out);
		fclose($fp);
	}

}

function list_vhost_info($appname, $details, $port)
{
	$out = array();
	$out[] = "\n $appname: (" . $details['working_dir'] . ')' . "\n   ver=" . $details['deploy_version'];
	foreach ($details['vhosts'] as $vhost_details) {
		$vhost_details['interface'] = str_replace('*', ":$port", $vhost_details['interface']);
		
		$line = '   http://' . $vhost_details['hostname'] . $vhost_details['interface'];
		if (isset($vhost_details['description'])) {
			$line .= ' (' . $vhost_details['description'] . ')';
		}
		$out[] = $line;
	}
	return $out;
}

switch ($command) {
	case 'start':
		start($show_instance_info);
		break;
		
	case 'stop':
		stop();
		break;
		
	case 'reload':
	case 'graceful':
		reload($show_instance_info);
		break;
		
	case 'reloadstart':
		if (file_exists($pidfile)) {
			reload($show_instance_info);
		} else {
			start($show_instance_info);
		}
		break;
		
	case 'status':
		if (file_exists($pidfile)) {
			$pid = trim(file_get_contents($pidfile));
			if (is_really_running($pid)) {
				echo "$prog is running (pid $pid)\n";
				list_vhosts($show_instance_info);
				print implode("\n",$out)."\n";
				exit(0);
			} else {
				cleanup_instance();
				echo "$prog is not running\n";
				exit(5);
			}
		} else {
			echo "$prog is not running\n";
			exit(5);
		}
		break;
		
	case 'restart':
		if (file_exists($pidfile)) {
			$pid = trim(file_get_contents($pidfile));
			if (is_really_running($pid)) {
				stop();
				do_output();
				# Give it chance to release the TCP sockets
				sleep(1);
			}
		}
		start($show_instance_info);
		break;
		
	case 'condrestart':
		if (file_exists($pidfile)) {
			stop();
			do_output();
			# Give it chance to release the TCP sockets
			sleep(1);
			$ret = start($show_instance_info);
		} else {
			exit(0);
		}
		break;
	
	case 'configtest':
		echo "Checking configuration file syntax ($conffile): ";
		check_config();
		break;
	
	default:
		print "Unknown command '$command'\n";
		print $usage_text;
		exit(1);
		break;
}

do_output();
exit($ret);


function do_output()
{
	global $ret, $out;
	if ($ret == 0) {
		print "[ OK ]\n";
	} else {
		print "[ ERROR ]\n";
	}
	if (count($out) > 0) {
		Tools_WADF::consoleOutput(implode("\n", $out), 80);
	}
	$out = array();
	$ret = 0;
}

function is_really_running($pid)
{
	exec("ps $pid", $out, $ret);
	if ($ret === 0) return true;
	return false;
}

function cleanup_instance()
{
	$files = array('pidfile', 'portfile', 'lockfile', 'errlogfile', 'default_vhost_file', 'default_error_page');
	foreach ($files as $file) {
		@unlink($GLOBALS[$file]);
	}
}

